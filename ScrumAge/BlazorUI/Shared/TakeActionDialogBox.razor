@namespace GameboardComponents
@using GameLibrary.Services;
@using GameLibrary.Interfaces;
@using GameLibrary.Models.Locations

<div takeactionarea>
    <div takeactiondialog>

        @if (Location is OvertimeLocation || Location is ResourceLocation) {
            <p>At @Location.Name, Would you like to add Overclocks? (@TotalOverclock)</p>
            <ul style="list-style:circle">
                @foreach (Overclock overclock in Gameboard.GetInstance().CurrentPlayer.Board.Overclocks) {
                <li style="display:inline">
                    <label class="switch">
                        &#9881 @overclock.Level
                        <input type="checkbox" @onchange="eventArgs => {OverclockSelect(overclock, eventArgs.Value); }">
                        <span class="slider"></span>
                    </label>
                </li>
                }
            </ul>
            <button @onclick="TakeLocationActionwithOverclock">Do it!!</button>
        }
        else {
            <p>At @Location.Name, Take action?</p>
            <button @onclick="TakeLocationAction">Do it!!</button>
        }

    <label>
        @foreach (var item in OverclockIndexes) {
            @item
        }
        @Gameboard.GetInstance().CurrentPlayer.Name

        @Gameboard.GetInstance().CurrentPlayer.Board.Overclocks.Count;
    </label>
    </div>
</div>

<style>
    div[takeactionarea] {
        height: 100%;
        width: 100%;
        text-align: center;
        vertical-align: middle;
        background-color: transparent;
        z-index: 5;
    }

    div[takeactiondialog] {
        height: 200px;
        width: 400px;
        width: 50%;
        margin: 0 auto;
        text-align: center;
        background-color: darkseagreen;
        z-index: 4;
    }
</style>

@code {
    [Parameter]
    public ILocation Location { get; set; }
    [Parameter]
    public EventCallback<bool> OnPlaceDeveloper { get; set; }
    public EventCallback<bool> ClickChanged { get; set; }
    List<int> OverclockIndexes { get; set; }
    public int TotalOverclock { get; set; }



    protected override void OnInitialized() {
        OverclockIndexes = new List<int>();
        TotalOverclock = 0;
    }

    private void OverclockSelect(Overclock overclock, object value) {
        int index = Gameboard.GetInstance().CurrentPlayer.Board.GetOverclockIndex(overclock);
        if ((bool)value == true) {
            TotalOverclock += overclock.Level;
            OverclockIndexes.Add(index);
        }
        else {
            TotalOverclock -= overclock.Level;
            OverclockIndexes.Remove(index);
        }
        OverclockIndexes.Sort();
        OverclockIndexes.Reverse();
    }

    private async Task TakeLocationActionwithOverclock() {
        // call other method sig
        GameController.TakeLocationAction(Location, TotalOverclock, OverclockIndexes);

        await OnPlaceDeveloper.InvokeAsync(false);
    }

    private async Task TakeLocationAction() {
        GameController.TakeLocationAction(Location);

        await OnPlaceDeveloper.InvokeAsync(false);
    }
}
