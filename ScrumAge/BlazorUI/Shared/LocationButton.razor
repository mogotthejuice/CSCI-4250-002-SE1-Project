@namespace GameboardComponents
@using GameLibrary.Models.Locations
@using GameLibrary.Models
@using GameLibrary.Interfaces
@using System.Drawing
@using static GameLibrary.Services.GameController


    <button  style="overflow-y:auto" class="scrum-button" @onmouseover="MouseHover" @onmouseout="MouseExit" @onclick="LocationClick">
            @if (IsOverButton == false) 
            {
                <p front-title>@Location.Name</p>
            }
            else if (IsOverButton == true)
            {
                <p back-title>@Location.Name</p>
                @if (Location != Gameboard.GetInstance().GetLocation("Overtime"))
                {
                    <div back-spaces >

                        @for (int i = 0; i < @Game.Players.Count; i++)
                        {
                            GetNumDevs(i);
                            @for (int j = 0; j < @numOfDevs; j++)
                            {
                                <span class="oi oi-media-record" style="color:@Players[i].FigColor;"> </span>

                            }
                        }
                        @for (int k = 0; k < Location.SpacesLeft; k++)
                        {
                            <span class="oi oi-media-record" style="color:white"> </span>
                        }
                </div>
                }
                <div back-details>
                    @((MarkupString)@GetResource())
                </div>
                
            }
        </button>


<style>
    
    p[front-title] {
        font-size: larger;
        font-weight: bolder;
    }
    p[back-title] {
        height: 10%;
        z-index: 1;
        font-size: medium;
        font-weight: bolder;
    }
    div[back-details] {
        text-align:left;
        height: 85%;
        width:30%;
        font-size: small;
        z-index: 2;
    }
    div[back-spaces] {
        height: 85%;
        width:50%;
        font-size: small;
        z-index: 2;
        float:right;
    }
</style>

@code {
    public bool IsOverButton { get; set; } = false;
    public Gameboard Game = Gameboard.GetInstance();
    List<Player> Players = Gameboard.GetInstance().Players.ToList();

    private int numOfDevs;

    [Parameter]
    public ILocation Location { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> LocationClick { get; set; }

    public void MouseHover() {
        IsOverButton = true;
    }

    public void MouseExit() {
        IsOverButton = false;
    }


    public string GetSpaces() {
        string details = string.Empty;


        if (Location != Gameboard.GetInstance().GetLocation("Overtime")) {
            details += $"Spaces Left:  {Location.SpacesLeft}";
        }


        return details;
    }

    private int GetNumDevs(int i)
    {
        numOfDevs =  Location.numPlayerDevelopers[i];
        return numOfDevs;
    }

    public string GetResource() {
        string details = string.Empty;

        if (Location is ResourceLocation) {
            ResourceLocation loc = (ResourceLocation)Location;
            details += $"Resource:     {loc.Resource}";
        }
        else if (Location is InvestmentField) {
            InvestmentField loc = (InvestmentField)Location;
            details += $"Resource:     Bitcoin Investment Level";
        }
        else if (Location is TrainingCenter) {
            TrainingCenter loc = (TrainingCenter)Location;
            details += $"Resource:     Add a Developer";
        }
        else if (Location is NerdLocation) {
            NerdLocation loc = (NerdLocation)Location;
            details += $"Resource:     Overclock Upgrade";
        }
        else if (Location is ConsultantCardLocation) {
            ConsultantCardLocation loc = (ConsultantCardLocation)Location;
            string resource = loc.Card.Upper.Resource.ToString();
            string number = loc.Card.Upper.Number.ToString();
            details += $"Resource: {resource} <br> Number: {number}";
        }
        else if (Location is LicenseTileLocation) 
        {
            LicenseTileLocation loc = (LicenseTileLocation)Location;

            string requiredResources = "";

            if(loc.Tile.RequiredResources != null)
            {
                foreach (Resources resource in loc.Tile.RequiredResources.Keys)
                {
                    requiredResources += resource.ToString();
                    requiredResources += ", ";
                }
            }
            


            string tileType = loc.Tile.Type.ToString();
            string numResources = loc.Tile.NumResources.ToString();
            string resourceTypes = loc.Tile.NumResourceTypes.ToString();
            if(loc.Tile.Type == LicenseTileType.FIXED_RESOURCES)
            {
                 details += $"Resource: {requiredResources} <br> Tile Type: {tileType} <br> Required Resources: {requiredResources}";
            }
            else if(loc.Tile.Type == LicenseTileType.FIXED_NUM_RESOURCES)
            {
                details += $"Resource Types Number: {resourceTypes} <br> Tile Type: {tileType} <br> Number of Resources: {numResources}";
            }
            else
            {
                details += $"Number of Resources: {numResources} <br> Tile Type: {tileType}";
            }
           
        }


        return details;
    }


    public string GetConsCardDetails()
    {
        string consultantCardDetails = null;
        consultantCardDetails = Gameboard.GetInstance().CurrentPlayer.Board.ConsultantCards[^1].Upper.Components.ToString();
        return consultantCardDetails;
    }

    public string GetFigures(Player p, string location)
    {
        string color = "";
        if(p.FigColor.ToUpper() == "RED")
        {
            color = $"&#x1F534";
        }
        else if(p.FigColor.ToUpper() == "YELLOW")
        {
            color = $"&#x1F7E1";
        }
        else if(p.FigColor.ToUpper() == "BLUE")
        {
            color = $"&#x1F535";
        } 
        else
        {
            color = $"&#x1F7E2";
        }

        return color + " " + Gameboard.GetInstance().GetLocation(location).GetNumPlayerDevelopers(p).ToString();
    }
}
