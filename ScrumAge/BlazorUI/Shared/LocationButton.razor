@namespace GameboardComponents
@using GameLibrary.Models.Cards
@using GameLibrary.Models.Locations
@using GameLibrary.Models
@using GameLibrary.Interfaces
@using System.Drawing
@using System.IO
@using static GameLibrary.Services.GameController

<div>
    <div style="float:left">
        <button style="background:url(@BackImage), url(@BackImageResource), url(@BackImage2); background-position: left top, center top, left bottom; background-repeat: no-repeat, no-repeat, no-repeat;  background-size:50px; background-repeat: no-repeat;" @onmouseover="MouseHover" @onmouseout="MouseExit" @onclick="LocationClick">
            @if (IsOverButton == false) 
            {
                <p front-title>@Location.Name</p>
            }
            else if (IsOverButton == true)
            {
                <p back-title>@Location.Name</p>
                <p back-details>
                    @if (Location != Gameboard.GetInstance().GetLocation("Overtime")) 
                    {
                        @GetSpaces() <br>
                    }

                    @((MarkupString)@GetResource())
                </p>
            }
        </button>
    </div>
    <div style="float:right">
    @for(int i = 0; i < @Gameboard.GetInstance().Players.Count; i++)
    {
        <p style="display: inline-block;padding-right:100px;">@((MarkupString)@GetFigures(@Gameboard.GetInstance().Players.ToArray()[i], @Gameboard.GetInstance().GetLocation(@Location.Name).Name))</p>
        <br>
    } 
    </div>
    
</div>

<style>
    button {
        width: 175px;
        height: 200px;
        border: none;
        display: inline-block;
        transition-duration: 0.4s;
    }

    background
    {
        z-index: 3;
    }
    
    p[front-title] {
        font-size: larger;
        font-weight: bolder;
    }
    p[back-title] {
        height: 20%;
        z-index: 1;
        font-size: medium;
        font-weight: bolder;
    }
    p[back-details] {
        height: 85%;
        font-size: small;
        z-index: 2;
    }
</style>

@code {
    public bool IsOverButton { get; set; } = false;

    string BackImage { get; set; } = "/img/noresource.jpg";

    string BackImageResource { get; set; } = "/img/noresource.jpg";

    string BackImage2 { get; set; } = "/img/noresource.jpg";


    [Parameter]
    public ILocation Location { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> LocationClick { get; set; }

    public void MouseHover() {
        IsOverButton = true;


    }

    public void MouseExit() {
        IsOverButton = false;
    }

    public string GetSpaces() {
        string details = string.Empty;


        if (Location != Gameboard.GetInstance().GetLocation("Overtime")) {
            details += $"Spaces Left:  {Location.SpacesLeft}";
        }


        return details;
    }

    public string GetResource() {
        string details = string.Empty;

        if (Location is ResourceLocation) {
            ResourceLocation loc = (ResourceLocation)Location;
            details += $"Resource:     {loc.Resource}";
        }
        else if (Location is InvestmentField) {
            InvestmentField loc = (InvestmentField)Location;
            details += $"Resource:     Bitcoin Investment Level";
        }
        else if (Location is TrainingCenter) {
            TrainingCenter loc = (TrainingCenter)Location;
            details += $"Resource:     Add a Developer";
        }
        else if (Location is NerdLocation) {
            NerdLocation loc = (NerdLocation)Location;
            details += $"Resource:     Overclock Upgrade";
        }
        else if (Location is ConsultantCardLocation) {
             
            ConsultantCardLocation loc = (ConsultantCardLocation)Location;
            UpperConCard conCardComp = loc.Card.Upper;
            ILowerConCard conCardLower = loc.Card.Lower;
            

            //For upper consultant card component
            switch(conCardComp.Components)
            {
                case UpperConCardComponents.RESOURCE:
                    BackImage = "/img/resource.png";
                    break;
                case UpperConCardComponents.RESOURCE_DICE_ROLL:
                    BackImage = "/img/Dice.png";
                    break;
                case UpperConCardComponents.VICTORY_POINTS:
                    BackImage = "/img/VictoryPoint.png";
                    break;
                case UpperConCardComponents.OVERCLOCK:
                    BackImage = "/img/overclock.png";
                    break;
                case UpperConCardComponents.BITCOIN_INVESTMENT:
                    BackImage = "/img/bitcoin.jpg";
                    break;
                case UpperConCardComponents.CONSULTANT_CARD:
                    BackImage = "/img/bitcoin.jpg";
                    break;
                case UpperConCardComponents.ONE_USE_OVERCLOCK:
                    BackImage = "img/consultantcard.png";
                    break;
                case UpperConCardComponents.ANY_2_RESOURCES:
                    BackImage = "/img/resource.png";
                    break;
            }

            //add another image for the resource

            switch(conCardComp.Resource)
            {
                case Resources.No_Resource:
                    BackImageResource = "/img/noresource.jpg";
                    break;
                case Resources.Money:
                    BackImageResource = "/img/money.png";
                    break;
                case Resources.Coffee:
                    BackImageResource = "/img/coffee.png";
                    break;
                case Resources.USB_Sticks:
                    BackImageResource = "/img/usbsticks.png";

                    break;
                case Resources.CPU_Cores:
                    BackImageResource = "/img/CPUcore.jpg";
                    break;
                case Resources.Power:
                    BackImageResource = "/img/power.png";
                    break;
                case Resources.Victory_Points:
                    BackImageResource = "/img/VictoryPoint.png";
                    break;
            }

            string CardType = conCardLower.GetType().Name.ToString();

            if(CardType == "SandLowerConCard")
            {
                SandLowerConCard sandCard = (SandLowerConCard) conCardLower;
                
                switch(sandCard.Person)
                {
                    case SandConCardPerson.THERAPIST:
                        BackImage2 = "/img/Sand_Therapist.jpeg";
                        break;
                    case SandConCardPerson.NERD:
                        BackImage2 = "/img/Sand_Nerd.jpeg";
                        break;
                    case SandConCardPerson.INVESTOR:
                        BackImage2 = "/img/Sand_StockbrokerInvestor.jpeg";
                        break;
                    case SandConCardPerson.LAWYER:
                        BackImage2 = "/img/Sand_Lawyer.jpeg";
                        break;
                }
                string person = sandCard.Person.ToString();
                details += $"Person: {person} <br>";
            }
            else
            {
                GreenLowerConCard greenConCard = (GreenLowerConCard) conCardLower;

                switch(greenConCard.Background)
                {

                     case GreenConCardBackground.BACKEND:
                        BackImage2 = "/img/Green_BackendConsultant.jpeg";
                        break;
                    case GreenConCardBackground.DATABASE:
                        BackImage2 = "/img/Green_DatabaseConsultant.jpeg";
                        break;
                    case GreenConCardBackground.HR:
                        BackImage2 = "/img/Green_HRConsultant.jpeg";
                        break;
                    case GreenConCardBackground.FRONTEND:
                        BackImage2 = "/img/Green_FrontendConsultant.jpeg";
                        break;
                    case GreenConCardBackground.LEGAL:
                        BackImage2 = "/img/Green_LegalConsultant.jpeg";
                        break;
                    case GreenConCardBackground.HARDWARE:
                        BackImage2 = "/img/Green_HardwareConsultant.jpeg";
                        break;
                    case GreenConCardBackground.NETWORKING:
                        BackImage2 = "/img/Green_NetworkingConsultant.jpeg";
                        break;
                    case GreenConCardBackground.ART:
                        BackImage2 = "/img/Green_ArtDesigner.jpeg";
                        break;
                }


                string cardType = greenConCard.Background.ToString();
                details += $"Card Type: {cardType} <br>";

            }


            
            
            string number = loc.Card.Upper.Number.ToString();
            string resource = conCardComp.Resource.ToString();
            
        
        
            details += $"Resource: {resource} <br> Number: {number}";
        }
        else if (Location is LicenseTileLocation) 
        {
            LicenseTileLocation loc = (LicenseTileLocation)Location;

            string requiredResources = "";

            if(loc.Tile.RequiredResources != null)
            {
                foreach (Resources resource in loc.Tile.RequiredResources.Keys)
                {
                    requiredResources += resource.ToString();
                    requiredResources += ", ";
                }
            }
            


            string tileType = loc.Tile.Type.ToString();
            string numResources = loc.Tile.NumResources.ToString();
            string resourceTypes = loc.Tile.NumResourceTypes.ToString();


            switch(loc.Tile.Type)
            {
                case LicenseTileType.FIXED_RESOURCES: 
                    break;
                case LicenseTileType.FIXED_NUM_RESOURCES:
                    break;
                case LicenseTileType.VARIABLE_NUM_RESOURCES:
                    break;
            }




            if(loc.Tile.Type == LicenseTileType.FIXED_RESOURCES)
            {
                 details += $"Resource: {requiredResources} <br> Tile Type: {tileType} <br> Required Resources: {requiredResources}";
            }
            else if(loc.Tile.Type == LicenseTileType.FIXED_NUM_RESOURCES)
            {
                details += $"Resource Types Number: {resourceTypes} <br> Tile Type: {tileType} <br> Number of Resources: {numResources}";
            }
            else
            {
                details += $"Number of Resources: {numResources} <br> Tile Type: {tileType}";
            }
           


            BackImageResource = "/img/noresource.jpg";
            BackImage = "/img/noresource.png";
            BackImage2 = "/img/noresource.png";





        }


        return details;
    }


    public string GetConsCardDetails()
    {
        string consultantCardDetails = null;
        consultantCardDetails = Gameboard.GetInstance().CurrentPlayer.Board.ConsultantCards[^1].Upper.Components.ToString();
        return consultantCardDetails;
    }

    public string GetFigures(Player p, string location)
    {
        string color = "";
        if(p.FigColor.ToUpper() == "RED")
        {
            color = $"&#x1F534";
        }
        else if(p.FigColor.ToUpper() == "YELLOW")
        {
            color = $"&#x1F7E1";
        }
        else if(p.FigColor.ToUpper() == "BLUE")
        {
            color = $"&#x1F535";
        } 
        else
        {
            color = $"&#x1F7E2";
        }

        return color + " " + Gameboard.GetInstance().GetLocation(location).GetNumPlayerDevelopers(p).ToString();
    }
}
