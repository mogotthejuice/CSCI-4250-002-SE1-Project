@page "/board/{playerNames}"
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using static GameLibrary.Services.GameController
@using GameLibrary.Interfaces
@using GameLibrary.Models
@using GameLibrary.Services
@using GameboardComponents



<h1>@message</h1>

@if (ShowDialog) {
    @switch(Game.Round) {
        case GameRound.PLACE_FIGURES:
            <PlaceDeveloperDialogBox Location="ClickedLocation" OnPlaceDeveloper="ShowDialogChanged" />
            break;
        case GameRound.TAKE_ACTIONS:
            <TakeActionDialogBox Location="ClickedLocation" OnPlaceDeveloper="ShowDialogChanged" />
            break;
        case GameRound.PAY_DEVELOPERS:
            <ResourceSelectorDialogBox OnConfirm="ShowDialogChanged" />
            break;
        default:
            break;
    }
}
else if (Game.Round == GameRound.PAY_DEVELOPERS) {
    CheckPayDevelopers();
}
else {
    <table border="1">

        <!-- #region Location Buttons -->

        <tr>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[4] LocationClick="@(e => LocationClick(e, Game.Locations[4]))" />
                
            </th>
            <th class="padColOne">

            </th>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[0] LocationClick="@(e => LocationClick(e, Game.Locations[0]))" />
            </th>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[1] LocationClick="@(e => LocationClick(e, Game.Locations[1]))" />
            </th>
        </tr>
        <tr>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[5] LocationClick="@(e => LocationClick(e, Game.Locations[5]))" />
            </th>
            <th></th>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[2] LocationClick="@(e => LocationClick(e, Game.Locations[2]))" />
            </th>
        </tr>
        <tr>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[6] LocationClick="@(e => LocationClick(e, Game.Locations[6]))" />
            </th>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[7] LocationClick="@(e => LocationClick(e, Game.Locations[7]))" />
            </th>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[3] LocationClick="@(e => LocationClick(e, Game.Locations[3]))" />
            </th>
        </tr>
        <tr>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[12] LocationClick="@(e => LocationClick(e, Game.Locations[12]))" />
            </th>
            <th></th>
            <th class="padColOne" >
                <LocationButton Location=@Game.Locations[8] LocationClick="@(e => LocationClick(e, Game.Locations[8]))" />
            </th>
            <th class="padColOne" >
                <LocationButton Location=@Game.Locations[9] LocationClick="@(e => LocationClick(e, Game.Locations[9]))" />
            </th>
            <th class="padColOne" >
                <LocationButton Location=@Game.Locations[10] LocationClick="@(e => LocationClick(e, Game.Locations[10]))" />
            </th>
            <th class="padColOne" >
                <LocationButton Location=@Game.Locations[11] LocationClick="@(e => LocationClick(e, Game.Locations[11]))" />
            </th>
        </tr>
        <tr>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[13] LocationClick="@(e => LocationClick(e, Game.Locations[13]))" />
            </th>
        </tr>
        <tr>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[14] LocationClick="@(e => LocationClick(e, Game.Locations[14]))" />
            </th>
        </tr>
        <tr>
            <th class="padColOne" width = "350">
                <LocationButton Location=@Game.Locations[15] LocationClick="@(e => LocationClick(e, Game.Locations[15]))" />
            </th>
        </tr>

        <!-- #endregion -->
        <!-- #region Player Resource Board -->

        <tr>
            <th class="padColOne" width = "350">
                <h3 style="display: block">Game Round: @Game.Round</h3>
                <ResourceBoardComponent _Player="Game.CurrentPlayer" />
            </th>
        </tr>

        <!-- #endregion -->

    </table>
}

<!-- #region Code-Behind -->

@code
{
    [Parameter]
    public string playerNames { get; set; }

    public Gameboard Game { get; set; }
    public GameLog Log { get; set; }

    public bool ShowDialog { get; set; }

    public ILocation ClickedLocation { get; set; }

    public Dictionary<int, int> PlayerNumberToNumDevelopersLeft { get; set; }
    public static Dictionary<Resources, int> NumResources { get; set; }

    private string message = "";

    protected override void OnInitialized() {
        Game = InitializeGameboard(playerNames);
        Log = GameLog.GetInstance();
        UpdateMessage();
        ShowDialog = false;
        NumResources = null;
    }

    private async Task LocationClick(MouseEventArgs e, ILocation location) {
        ShowDialog = true;
        ClickedLocation = location;
        this.StateHasChanged();

        if (Game.Round == GameRound.TALLY_SCORE) {
            Game.Round = GameRound.PLACE_FIGURES;
        }
    }

    private async Task PlaceDevelopersOnLocation(ILocation location) {
        int numDevelopersPlaced = 0;
        bool notInput = true;
        while (notInput) {
            try {
                var temp = await JSRuntime.InvokeAsync<string>("prompt", "How many players would you like to place? ");
                numDevelopersPlaced = Int32.Parse(temp);
                notInput = false;
            }
            catch (Exception) {
                // Player hit cancel or didn't input an integer
            }
        }

        PlaceDevelopers(numDevelopersPlaced, location);
        UpdateMessage();

        this.StateHasChanged();
    }

    private void TakeActionOnLocation(ILocation location) {
        TakeLocationAction(location);
        UpdateMessage();
    }

    private void StartPayDevelopers() {
        PlayerNumberToNumDevelopersLeft = PayDevelopersHandler.AutoPayDevelopers();
        if (PlayerNumberToNumDevelopersLeft.Count > 0) {
            Log.AddMessage($"{Game.CurrentPlayer.Name} must pay {PlayerNumberToNumDevelopersLeft[Game.CurrentPlayer.Number]} developers with resources.");
            ShowDialog = true;
        }
        else {
            GameController.StartNewRound();
        }

        UpdateMessage();
        this.StateHasChanged();
    }

    private void CheckPayDevelopers() {
        // Pay developers round has just started. Call StartPayDevelopers and exit.
        if (NumResources == null) {
            StartPayDevelopers();
            return;
        }

        if (PayDevelopersHandler.CheckResourcePayment(PlayerNumberToNumDevelopersLeft, NumResources)) {
            ShowDialog = true;
            UpdateMessage();
        }

        NumResources = null;
        this.StateHasChanged();
    }

    public void UpdateMessage(string _message = null) {
        if (_message is null)
            _message = Log.CurrentMessage;

        message = _message;
    }

    protected async Task ShowDialogChanged() {
        ShowDialog = false;
        UpdateMessage();
    }
}
<!-- #endregion -->

<style>

#wrapperBox
{
    width: 300px;
    height: 150px;
    background: red;
    display: inline-block;
}
</style>
