@page "/board/{playerNames}"
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using static GameLibrary.Services.GameController
@using GameLibrary.Interfaces
@using GameLibrary.Models
@using GameLibrary.Services
@using GameboardComponents



<h1>@message</h1>


<table>

    <!-- #region Location Buttons -->

    <tr>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[4] LocationClick="@(e => LocationClick(e, Game.Locations[4]))" />
        </th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[0] LocationClick="@(e => LocationClick(e, Game.Locations[0]))" />
        </th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[1] LocationClick="@(e => LocationClick(e, Game.Locations[1]))" />
        </th>
    </tr>

    <tr>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[5] LocationClick="@(e => LocationClick(e, Game.Locations[5]))" />
        </th>
        <th></th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[2] LocationClick="@(e => LocationClick(e, Game.Locations[2]))" />
        </th>
    </tr>

    <tr>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[6] LocationClick="@(e => LocationClick(e, Game.Locations[6]))" />
        </th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[7] LocationClick="@(e => LocationClick(e, Game.Locations[7]))" />
        </th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[3] LocationClick="@(e => LocationClick(e, Game.Locations[3]))" />
        </th>
    </tr>
    <tr>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[12] LocationClick="@(e => LocationClick(e, Game.Locations[12]))" />
        </th>
        <th></th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[8] LocationClick="@(e => LocationClick(e, Game.Locations[8]))" />
        </th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[9] LocationClick="@(e => LocationClick(e, Game.Locations[9]))" />
        </th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[10] LocationClick="@(e => LocationClick(e, Game.Locations[10]))" />
        </th>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[11] LocationClick="@(e => LocationClick(e, Game.Locations[11]))" />
        </th>
    </tr>
    <tr>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[13] LocationClick="@(e => LocationClick(e, Game.Locations[13]))" />
        </th>
    </tr>
    <tr>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[14] LocationClick="@(e => LocationClick(e, Game.Locations[14]))" />
        </th>
    </tr>
    <tr>
        <th class="padColOne">
            <LocationButton Location=@Game.Locations[15] LocationClick="@(e => LocationClick(e, Game.Locations[15]))" />
        </th>
    </tr>

    <!-- #endregion -->

    <!-- #region Player Resource Board -->

    <tr>
        <th class="padColOne">
            <h3 style="display: block">Game Round: @Game.Round</h3>
            <ResourceBoardComponent _Player="Game.PlayersInRound.Peek()" />
        </th>
    </tr>

    <!-- #endregion -->

</table>

<!-- #region Code-Behind -->

@code
{
    [Parameter]
    public string playerNames { get; set; }
    public Gameboard Game { get; set; }

    private string message = "";

    protected override void OnInitialized() {
        Game = InitializeGameboard(playerNames);
        message = GameLog.GetInstance().CurrentMessage;
    }

    private async Task LocationClick(MouseEventArgs e, ILocation location) {
        //Round divided into three phases and we need to check which phase we are in
        switch (Game.Round) {
            case GameRound.PLACE_FIGURES:
                await PlaceDevelopersOnLocation(location);
                break;
            case GameRound.TAKE_ACTIONS:
                TakeActionOnLocation(location);
                break;
            default: // GameRound.TALLY_SCORE not implemented so we go back to round 1
                Game.Round = GameRound.PLACE_FIGURES;
                break;
        }
    }

    private async Task PlaceDevelopersOnLocation(ILocation location) {
        int numDevelopersPlaced = 0;
        bool notInput = true;
        while (notInput) {
            try {
                var temp = await JSRuntime.InvokeAsync<string>("prompt", "How many players would you like to place? ");
                numDevelopersPlaced = Int32.Parse(temp);
                notInput = false;
            }
            catch (Exception) {
                // Player hit cancel or didn't input an integer
            }
        }

        PlaceDevelopers(numDevelopersPlaced, location);
        message = GameLog.GetInstance().CurrentMessage;

        this.StateHasChanged();
    }

    private void TakeActionOnLocation(ILocation location)
    {
        TakeLocationAction(location);
        message = GameLog.GetInstance().CurrentMessage;
        if (Game.Round == GameRound.PAY_DEVELOPERS)
        {
            PayDevelopers();
        }
    }

    private void PayDevelopers()
    {
        Dictionary<int, int> playerNumberToNumDevelopersLeft = PayDevelopersHandler.PayDevelopers();
        foreach (int playerNumber in playerNumberToNumDevelopersLeft.Keys)
        {
            Dictionary<Resources, int> resourcesPaid = PromptForResourcesInput();

            //TODO: Ensure correct amount of resources, and subtract from player
        }
    }

    private Dictionary<Resources, int> PromptForResourcesInput()
    {
        Dictionary<Resources, int> numResources = new Dictionary<Resources, int>();

        //TODO: Get number for each resource through jQuery Dialog

        return numResources;
    }
}

<!-- #endregion -->
