@page "/board/{playerNames}"
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using BlazorUI.Shared 
@using static GameLibrary.Services.GameController
@using GameLibrary.Interfaces
@using GameLibrary.Models
@using GameLibrary.Models.Locations
@using GameLibrary.Services
@using GameboardComponents

<div  class="scrum-overlay">
    <div class="scrum-container" style="height:300px; width:100%">
        <ResourceBoardComponent _Player="Game.CurrentPlayer"/>
        <h3 style="display: block;">Game Round: @Game.Round</h3>
        <h1>@message</h1>
    </div>
    <div class="scrum-container" style="height:200px;  width:100%">
        
    <h2>Game Log</h2>
    <div style="text-align:left; overflow-y:scroll; height: 80%; scrollbar-face-color: #43304c;">
    @foreach (string message in GameLog.GetInstance().Messages)
    {
        <p style="border-bottom:2px solid #43304c">@message</p>
    }
    
</div>
    </div>
</div>
<div style="width:70%;">
@if (Game.Round == GameRound.ENDGAME) {
    UriHelper.NavigateTo("/endgame");
}
else if (ShowDialog) {
    @switch (Game.Round) {
        case GameRound.PLACE_FIGURES:
            <PlaceDeveloperDialogBox Location="ClickedLocation" OnPlaceDeveloper="ShowDialogChanged" />
            break;
        case GameRound.TAKE_ACTIONS:
            @if (ClickedLocation.GetNumPlayerDevelopers(Game.CurrentPlayer) > 0) {
                @if (ClickedLocation.Name.StartsWith("License Tile") || ClickedLocation.Name.StartsWith("Consultant Card")) {
                    <ResourceSelectorDialogBox ClickedLocation="ClickedLocation" OnConfirm="ShowDialogChanged" />
                }
                else {
                    <TakeActionDialogBox Location="ClickedLocation" OnPlaceDeveloper="ShowDialogChanged" />
                }
            }
            else {
                UpdateMessage("Must have developers placed on location to take action. Try again.");
                ShowDialog = false;
                this.StateHasChanged();
            }
            break;
        case GameRound.PAY_DEVELOPERS:
            <ResourceSelectorDialogBox OnConfirm="ShowDialogChanged" />
            break;
        default:
            break;
    }
}
else if (Game.Round == GameRound.PAY_DEVELOPERS) {
    CheckPayDevelopers();
}
else {
    <h1>@message</h1>
    <table border="0">

        <!-- #region Location Buttons -->

        <tr>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[4] LocationClick="@(e => LocationClick(e, Game.Locations[4]))" />
                
            </th>
            <th class="padColOne">

            </th>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[0] LocationClick="@(e => LocationClick(e, Game.Locations[0]))" />
            </th>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[1] LocationClick="@(e => LocationClick(e, Game.Locations[1]))" />
            </th>
        </tr>
        <tr>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[5] LocationClick="@(e => LocationClick(e, Game.Locations[5]))" />
            </th>
            <th></th>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[2] LocationClick="@(e => LocationClick(e, Game.Locations[2]))" />
            </th>
        </tr>
        <tr>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[6] LocationClick="@(e => LocationClick(e, Game.Locations[6]))" />
            </th>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[7] LocationClick="@(e => LocationClick(e, Game.Locations[7]))" />
            </th>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[3] LocationClick="@(e => LocationClick(e, Game.Locations[3]))" />
            </th>
        </tr>


        @**@
        <tr style="height:30px">
        </tr>
        <tr>
            
            <th></th>
            <th class="padColOne">
                <LocationButton Location=@Game.Locations[8] LocationClick="@(e => LocationClick(e, Game.Locations[8]))" />
            </th>
            <th class="padColOne">
                <LocationButton Location=@Game.Locations[9] LocationClick="@(e => LocationClick(e, Game.Locations[9]))" />
            </th>
            <th class="padColOne">
                <LocationButton Location=@Game.Locations[10] LocationClick="@(e => LocationClick(e, Game.Locations[10]))" />
            </th>
            <th class="padColOne">
                <LocationButton Location=@Game.Locations[11] LocationClick="@(e => LocationClick(e, Game.Locations[11]))" />
            </th>
        </tr>
        <tr>
            <th></th>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[12] LocationClick="@(e => LocationClick(e, Game.Locations[12]))" />
            </th>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[13] LocationClick="@(e => LocationClick(e, Game.Locations[13]))" />
            </th>
        
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[14] LocationClick="@(e => LocationClick(e, Game.Locations[14]))" />
            </th>
            <th class="padColOne" width="350">
                <LocationButton Location=@Game.Locations[15] LocationClick="@(e => LocationClick(e, Game.Locations[15]))" />
            </th>
        </tr>

        <!-- #endregion -->
        

    </table>
}
</div>
<!-- #region Code-Behind -->

@code
{
    [Parameter]
    public string playerNames { get; set; }

    public Gameboard Game { get; set; }
    public static GameLog Log { get; set; }

    public static bool ShowDialog { get; set; }

    public ILocation ClickedLocation { get; set; }

    public static Dictionary<int, int> PlayerNumberToNumDevelopersLeft { get; set; }

    private static string message = "";

    protected override void OnInitialized() {
        Game = InitializeGameboard(playerNames);
        Log = GameLog.GetInstance();
        UpdateMessage();
        ShowDialog = false;
        PlayerNumberToNumDevelopersLeft = null;
    }

    private async Task LocationClick(MouseEventArgs e, ILocation location) {
        ShowDialog = true;
        ClickedLocation = location;
        this.StateHasChanged();
    }

    private async Task PlaceDevelopersOnLocation(ILocation location) {
        int numDevelopersPlaced = 0;
        bool notInput = true;
        while (notInput) {
            try {
                var temp = await JSRuntime.InvokeAsync<string>("prompt", "How many players would you like to place? ");
                numDevelopersPlaced = Int32.Parse(temp);
                notInput = false;
            }
            catch (Exception) {
                // Player hit cancel or didn't input an integer
            }
        }

        PlaceDevelopers(numDevelopersPlaced, location);
        UpdateMessage();

        this.StateHasChanged();
    }

    private void TakeActionOnLocation(ILocation location) {
        TakeLocationAction(location);
        UpdateMessage();
    }

    private void StartPayDevelopers() {
        PlayerNumberToNumDevelopersLeft = PayDevelopersHandler.AutoPayDevelopers();
        if (PlayerNumberToNumDevelopersLeft.Count > 0) {
            Log.AddMessage($"{Game.CurrentPlayer.Name} must pay {PlayerNumberToNumDevelopersLeft[Game.CurrentPlayer.Number]} developers with resources.");
            ShowDialog = true;
        }
        else {
            PlayerNumberToNumDevelopersLeft = null;
            GameController.StartNewRound();
        }

        this.StateHasChanged();
    }

    private void CheckPayDevelopers() {
        // Pay developers round has just started. Call StartPayDevelopers and exit.
        if (PlayerNumberToNumDevelopersLeft is null) {
            StartPayDevelopers();
            return;
        }

        if (PlayerNumberToNumDevelopersLeft.Count > 0) {
            ShowDialog = true;
            Log.AddMessage($"{Game.CurrentPlayer.Name} must pay {PlayerNumberToNumDevelopersLeft[Game.CurrentPlayer.Number]} developers with resources.");
        }
        else {
            PlayerNumberToNumDevelopersLeft = null;
            Game.Round = GameRound.PLACE_FIGURES;
        }

        this.StateHasChanged();
    }

    public static void UpdateMessage(string _message = null) {
        if (_message is not null)
            Log.AddMessage(_message);

        message = Log.CurrentMessage;
    }

    protected async Task ShowDialogChanged() {
        ShowDialog = false;
        UpdateMessage();
    }
}
<!-- #endregion -->
<style>
    #wrapperBox {
        width: 300px;
        height: 150px;
        background: red;
        display: inline-block;
    }
</style>