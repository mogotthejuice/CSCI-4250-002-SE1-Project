@page "/board/{playerNames}"
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using static GameLibrary.Services.GameController
@using GameLibrary.Interfaces
@using GameLibrary.Models

<h1>@message</h1>
<table>

    <tr>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[4]))">@Game.Locations[4].SpacesLeft<br>@Game.Locations[4].Name</button></th>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[0]))">@Game.Locations[0].SpacesLeft<br>@Game.Locations[0].Name<br>(Coffee)</button></th>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[1]))">@Game.Locations[1].SpacesLeft<br>@Game.Locations[1].Name <br> (USB Sticks)</button></th>
    </tr>

    <tr>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[5]))">@Game.Locations[5].SpacesLeft<br>@Game.Locations[5].Name<br>(Bitcoin Investment)</button></th>
        <th></th>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[2]))">@Game.Locations[2].SpacesLeft<br>@Game.Locations[2].Name<br>(CPU Cores)</button></th>
    </tr>

    <tr>

        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[6]))">@Game.Locations[6].SpacesLeft<br>@Game.Locations[6].Name<br>New Developer</button></th>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[7]))">@Game.Locations[7].SpacesLeft<br>@Game.Locations[7].Name<br>Overclock</button></th>                                                @*This button needs to be updated with the object -- NOT YET CREATED*@
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[3]))">@Game.Locations[3].SpacesLeft<br>@Game.Locations[3].Name<br>Power</button></th>
    </tr>
    <tr>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[12]))">License Tile</button></th>                                                   @*This button needs to be updated with the object -- NOT YET CREATED*@
        <th></th>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[8]))">Con Card</button></th>                                                        @*This button needs to be updated with the object -- NOT YET CREATED*@
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[9]))">Con Card</button></th>                                                        @*This button needs to be updated with the object -- NOT YET CREATED*@
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[10]))">Con Card</button></th>                                                        @*This button needs to be updated with the object -- NOT YET CREATED*@
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[11]))">Con Card</button></th>                                                        @*This button needs to be updated with the object -- NOT YET CREATED*@
    </tr>
    <tr>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[13]))">License Tile</button></th>                                                   @*This button needs to be updated with the object -- NOT YET CREATED*@
    </tr>
    <tr>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[14]))">License Tile</button></th>                                                   @*This button needs to be updated with the object -- NOT YET CREATED*@
    </tr>
    <tr>
        <th class="padColOne"><button @onclick="@(e => LocationClick(e, Game.Locations[15]))">License Tile</button></th>                                                   @*This button needs to be updated with the object -- NOT YET CREATED*@
        <th>Player: @Game.PlayersInRound.Peek().Name</th>
    </tr>

    <tr>
        <th class="padColOne">
            <h3 style="display: block">Game Round: @Game.Round</h3>

            <h3 style="display: block">Bitcoin Investment Level: @Game.PlayersInRound.Peek().Board.NumBitcoinInvestments</h3>  @*TEMPORARY, will be replaced by visual resource board*@

            <h3 style="display: block">Player Score: @PlayerScore</h3>
            
            <h3 style="display: block">Player Developers Left: @Game.PlayersInRound.Peek().Board.NumDevelopersUnplaced</h3>  @*TEMPORARY, will be replaced by visual resource board*@
            
            <h3 style="display: block">Player Developers Owned: @Game.PlayersInRound.Peek().Board.NumDevelopersOwned</h3>  @*TEMPORARY, will be replaced by visual resource board*@

            <h3 style="display: block">Coffee: @Game.PlayersInRound.Peek().Board.GetNumResource(Resources.Coffee)</h3>  @*TEMPORARY, will be replaced by visual resource board*@
            <h3 style="display: block">Power: @Game.PlayersInRound.Peek().Board.GetNumResource(Resources.Power)</h3>  @*TEMPORARY, will be replaced by visual resource board*@
            <h3 style="display: block">CPU Cores: @Game.PlayersInRound.Peek().Board.GetNumResource(Resources.CPU_Cores)</h3>  @*TEMPORARY, will be replaced by visual resource board*@
            <h3 style="display: block">USB Sticks: @Game.PlayersInRound.Peek().Board.GetNumResource(Resources.USB_Sticks)</h3>  @*TEMPORARY, will be replaced by visual resource board*@ 
        </th>
    </tr>
</table>

@code
{
    [Parameter]
    public string playerNames { get; set; }
    public Gameboard Game { get; set; }

    int PlayerScore = 0;

    private string message = "";

    protected override void OnInitialized() {
        Game = InitializeGameboard(playerNames);
    }

    private async Task LocationClick(MouseEventArgs e, ILocation location) {
        //Round divided into three phases and we need to check which phase we are in
        switch (Game.Round) {
            case GameRound.PLACE_FIGURES:
                await PlaceDevelopersOnLocation(location);
                break;
            case GameRound.TAKE_ACTIONS:
                TakeActionOnLocation(location);
                break;
            default: // GameRound.TALLY_SCORE not implemented so we go back to round 1
                Game.Round = GameRound.PLACE_FIGURES;
                break;
        }
    }

    private async Task PlaceDevelopersOnLocation(ILocation location) {
        //Place figures section
        //1. Figure out which button was clicked
        //2. Open dialog for players to input how many players they will place
        //3. Ensure player has enough players to place
        int numDevelopersPlaced = 0;
#if !DEBUG
        bool notInput = true;
        while (notInput) {
            try {
                var temp = await JSRuntime.InvokeAsync<string>("prompt", "How many players would you like to place? ");
                numDevelopersPlaced = Int32.Parse(temp);
                notInput = false;
            }
            catch (Exception f) {
                // Player hit cancel or didn't input an integer
            }

        }
#endif

#if DEBUG
        numDevelopersPlaced = 2;
#endif

        Player player = Game.PlayersInRound.Peek();
        try {
            PlaceDevelopers(player, numDevelopersPlaced, location);
            message = $"{player.Name} placed {numDevelopersPlaced} figures.";
        }
        catch (Exception f) {
            message = $"{f.Message}";
        }

        this.StateHasChanged();
    }

    private void TakeActionOnLocation(ILocation location) {
        Player player = Game.PlayersInRound.Peek();
        try {
            TakeLocationAction(player, location);
            string output = $"{player.Name} took action.";
            foreach (var item in player.Board.NumResources) {
                output += $"{item.Key} {item.Value}\n";
            }
            message = output;
        }
        catch (Exception f) {
            message = $"{f.Message}";
        }
    }
}
